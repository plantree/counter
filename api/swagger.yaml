openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/plantree/counter/1.0.0
info:
  description: This is a simple API for [counter](https://github.com/plantree/counter)
  version: "1.0.0"
  title: Counter API
  contact:
    email: eric.wangpy@outlook.com
  license:
    name: MIT License
    url: 'http://opensource.org/licenses/MIT'
tags:
  - name: developers
    description: Operations available to regular developers
paths:
  /pv/get:
    get:
      tags:
        - developers
      operationId: getPv
      description: |
        By passing parameters, you can get status of given key in given namespace
      parameters: 
        - in: query
          name: namespace 
          description: namespace to get status
          schema:
            type: string
          required: true
        - in: query
          name: key
          description: key to get status (without this parameter will return all keys under the namespace)
          schema:
            type: string
          required: false
      responses:
        '200':
          description: get status of PV successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '400':
          description: bad input parameter  
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              example:
                code: 4001,
                err_msg: this namespace or key doesn't exist
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              example: 
                code: 5001
                err_msg: server error    
                
  /pv/create:
    post:
      tags:
        - developers
      operationId: createPv
      description: |
        By passing parameters, you can create a namespace for PV with an secret
      parameters: 
        - in: query 
          name: namespace
          description: namespace to create
          schema:
            type: string
          required: true
        - in: query
          name: secret
          description: secret is needed when you want to reset/delete the value (default the same as namepsace)
          schema:
            type: string
          required: false
      responses:
        '200':
          description: create namespace of PV successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '400':
          description: bad input parameter  
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              example:
                code: 4001,
                err_msg: this namespace has already been created
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              example: 
                code: 5001
                err_msg: server error    
                
  /pv/increment:
    post:
      tags:
        - developers
      operationId: incrementPv
      description: |
        By passing parameters, you can increment PV by 1 of given key in given namespace (will initialize automatically)
      parameters:
        - in: query
          name: namespace
          description: namespace to be incremented
          schema:
            type: string
          required: true
        - in: query 
          name: key
          description: key to be incremented
          schema:
            type: string
          required: true
      responses:
        '200':
          description: increment PV successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '400':
          description: bad input parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              example: 
                code: 4001
                err_msg: invalid namespace
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              example: 
                code: 5001
                err_msg: server error
                
  /pv/reset:
    post:
      tags:
        - developers
      operationId: resetPv
      description: |
        By passing parameters, you can reset PV of given key in given namespace with given value
      parameters:
        - in: query
          name: namespace
          description: namespace to be reset
          schema:
            type: string
          required: true
        - in: query
          name: secret
          description: secret
          schema:
            type: string
          required: true
        - in: query 
          name: key
          description: key to be reset
          schema:
            type: string
          required: true
        - in: query
          name: value
          description: number of PV to be reset
          schema:
            type: integer
            format: int32
            minimum: 0
          required: true
      responses:
        '200':
          description: reset PV successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '400':
          description: bad input parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              example: 
                code: 4001
                err_msg: invalid namespace
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              example: 
                code: 5001
                err_msg: server error
  /pv/delete:
    post:
      tags:
        - developers
      operationId: deletePv
      description: |
        By passing parameters, you can delete of given key or given namespace
      parameters:
        - in: query
          name: namespace
          description: namespace to be delete
          schema:
            type: string
          required: true
        - in: query
          name: secret
          description: secret
          schema:
            type: string
          required: true
        - in: query 
          name: key
          description: key to be delete
          schema:
            type: string
          required: true
      responses:
        '200':
          description: delete PV successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '400':
          description: bad input parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              example: 
                code: 4001
                err_msg: invalid namespace
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              example: 
                code: 5001
                err_msg: server error    
                
components:
  schemas:
    ErrorMessage:
      type: object
      required:
        - code
        - err_msg
        - data
      properties:
        code:
          type: integer
          format: int32
          example: 0
        err_msg:
          type: string
          example: successfully
        data:
          type: array
          items: 
            $ref: '#/components/schemas/Data'
          example: []
    Data:
      type: object 
      required:
        - key
        - value
      properties:
        key:
          type: string 
          example: "key"
        value: 
          type: string
          example: "value"